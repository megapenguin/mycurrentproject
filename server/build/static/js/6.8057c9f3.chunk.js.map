{"version":3,"sources":["../node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js","../node_modules/@ant-design/icons/es/icons/LeftOutlined.js","components/ViewInstructions/AddStepsModal.js","components/ViewInstructions/UpdateStepsModal.js","components/ViewInstructions/ViewInstructions.js"],"names":["LeftOutlined","props","ref","React","AntdIcon","Object","assign","icon","LeftOutlinedSvg","displayName","AddStepsModal","useState","isModalVisible","setIsModalVisible","confirmLoading","setConfirmLoading","setIfCanceled","lastStep","setLastStep","useEffect","stepInfo","map","d","stepNumber","console","log","handleCancel","onFinish","values","info","id","setTimeout","axios","post","then","res","success","content","okButtonProps","catch","error","type","className","onClick","PlusOutlined","title","visible","onOk","onCancel","afterClose","afterClosing","destroyOnClose","footer","form","htmlType","loading","layout","name","initialValues","remember","onFinishFailed","errorInfo","style","borderRadius","Item","label","rules","required","message","TextArea","placeholder","UpdateStepsModal","useForm","setFieldsValue","titleId","stepInstruction","disabled","bordered","withRouter","history","Data","useContext","DataContext","Title","dataState","dataHolder","dataInfo","stepsData","setStepsData","currentTitle","setCurrentTitle","value","dataHistory","useHistory","location","pathname","split","data","modalClosed","to","level","size","header","dataSource","renderItem","item","flex","delete","params"],"mappings":"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","file":"static/js/6.8057c9f3.chunk.js","sourcesContent":["// This icon file is generated automatically.\nvar LeftOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z\" } }] }, \"name\": \"left\", \"theme\": \"outlined\" };\nexport default LeftOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LeftOutlinedSvg from \"@ant-design/icons-svg/es/asn/LeftOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar LeftOutlined = function LeftOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: LeftOutlinedSvg\n  }));\n};\n\nLeftOutlined.displayName = 'LeftOutlined';\nexport default /*#__PURE__*/React.forwardRef(LeftOutlined);","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Modal, Button, Upload, Space } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction AddStepsModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n  const [lastStep, setLastStep] = useState(\"0\");\r\n\r\n  useEffect(() => {\r\n    if (props.stepInfo === null) {\r\n      setLastStep(\"0\");\r\n    } else {\r\n      props.stepInfo.map((d) => {\r\n        return setLastStep(d.stepNumber), console.log(lastStep);\r\n      });\r\n    }\r\n  }, [isModalVisible]);\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n    //console.log(filename);\r\n  };\r\n  const unchecking = () => {\r\n    setFilename(\"Choose file\");\r\n    //console.log(filename);\r\n  };\r\n  const viewFile = () => {\r\n    if (filename == \"Choose file\") {\r\n      //console.log(\"No image selected\");\r\n    } else {\r\n      setUploadedImagePath(filename.file.response.filePath);\r\n      //console.log(filename.file.response);\r\n    }\r\n  };\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n    //console.log(props.info);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    props.afterClosing();\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n\r\n    values[\"titleId\"] = props.info.id;\r\n    values[\"stepNumber\"] = lastStep + 1;\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n\r\n    axios\r\n      .post(\"/api/v1/instructions/add_instruction\", values)\r\n      .then((res) => {\r\n        Modal.success({\r\n          content: \"Successfully added instruction\",\r\n          okButtonProps: {},\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to add instruction\",\r\n      okButtonProps: {\r\n        style: { borderRadius: \"50px\" },\r\n      },\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    //console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-add\" onClick={showModal}>\r\n        <span className=\"desktop-view\">\r\n          <PlusOutlined /> Add Steps\r\n        </span>\r\n        <span className=\"mobile-view\">\r\n          <PlusOutlined />\r\n        </span>\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Write Instructions\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button\r\n            form=\"myForm\"\r\n            key=\"submit\"\r\n            htmlType=\"submit\"\r\n            type=\"primary\"\r\n            className=\"modal-button\"\r\n            loading={confirmLoading}\r\n            onClick={onFinish}\r\n          >\r\n            Add\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item\r\n            label=\"Instruction\"\r\n            name=\"stepInstruction\"\r\n            rules={[{ required: true, message: \"Please input title!\" }]}\r\n          >\r\n            <Input.TextArea placeholder=\"Write instruction here...\" />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddStepsModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Modal, Button } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nfunction UpdateStepsModal(props) {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n  const [ifCanceled, setIfCanceled] = useState(false);\r\n\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState();\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const checking = (file) => {\r\n    setFilename(file);\r\n    //console.log(filename);\r\n  };\r\n  const unchecking = () => {\r\n    setFilename(\"Choose file\");\r\n    //console.log(filename);\r\n  };\r\n  const viewFile = () => {\r\n    if (filename == \"Choose file\") {\r\n      //console.log(\"No image selected\");\r\n    } else {\r\n      setUploadedImagePath(filename.file.response.filePath);\r\n      //console.log(filename.file.response);\r\n    }\r\n  };\r\n  const showModal = () => {\r\n    form.setFieldsValue({\r\n      id: props.stepInfo.id,\r\n      titleId: props.stepInfo.titleId,\r\n      stepNumber: props.stepInfo.stepNumber,\r\n      stepInstruction: props.stepInfo.stepInstruction,\r\n    });\r\n    setIsModalVisible(true);\r\n    //console.log(props.info);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIfCanceled(true);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    props.afterClosing();\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    setConfirmLoading(true);\r\n    setIfCanceled(false);\r\n    setTimeout(() => {\r\n      setIsModalVisible(false);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n\r\n    axios\r\n      .post(\"/api/v1/instructions/update_instruction\", values)\r\n      .then((res) => {\r\n        Modal.success({\r\n          content: \"Successfully updated instruction\",\r\n          okButtonProps: {},\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failure to update instruction\",\r\n      okButtonProps: {\r\n        style: { borderRadius: \"50px\" },\r\n      },\r\n    });\r\n    setTimeout(() => {\r\n      setIsModalVisible(true);\r\n      setConfirmLoading(false);\r\n    }, 2000);\r\n    //console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" className=\"modal-button-add\" onClick={showModal}>\r\n        <span className=\"desktop-view\">\r\n          <PlusOutlined /> Update\r\n        </span>\r\n        <span className=\"mobile-view\">\r\n          <PlusOutlined />\r\n        </span>\r\n      </Button>\r\n\r\n      <Modal\r\n        title=\"Edit Instructions\"\r\n        visible={isModalVisible}\r\n        confirmLoading={confirmLoading}\r\n        onOk={onFinish}\r\n        onCancel={handleCancel}\r\n        afterClose={handleClose}\r\n        destroyOnClose={true}\r\n        footer={[\r\n          <Button key=\"back\" className=\"modal-button\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button\r\n            form=\"myForm\"\r\n            key=\"submit\"\r\n            htmlType=\"submit\"\r\n            type=\"primary\"\r\n            className=\"modal-button\"\r\n            loading={confirmLoading}\r\n            onClick={onFinish}\r\n          >\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          form={form}\r\n          initialValues={{ remember: true }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          id=\"myForm\"\r\n        >\r\n          <Form.Item label=\"Id:\" name=\"id\">\r\n            <Input disabled={true} bordered={false} />\r\n          </Form.Item>\r\n          <Form.Item label=\"Title Id: \" name=\"titleId\">\r\n            <Input disabled={true} bordered={false} />\r\n          </Form.Item>\r\n          <Form.Item label=\"Step Number:\" name=\"stepNumber\">\r\n            <Input disabled={true} bordered={false} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            label=\"Instruction\"\r\n            name=\"stepInstruction\"\r\n            rules={[{ required: true, message: \"Please input title!\" }]}\r\n          >\r\n            <Input.TextArea />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateStepsModal;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { List, Button, Row, Col, Divider, Typography } from \"antd\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\n\r\nimport AddStepsModal from \"./AddStepsModal\";\r\nimport UpdateStepsModal from \"./UpdateStepsModal\";\r\n\r\nimport axios from \"axios\";\r\nimport { DataContext } from \"../GlobalContext/DataContext\";\r\nimport { withRouter, Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction ViewInstructions({ history }) {\r\n  let Data = useContext(DataContext);\r\n  const { Title } = Typography;\r\n  let [dataInfo, setDataInfo] = useState(Data.dataState.dataHolder);\r\n  const [stepsData, setStepsData] = useState([]);\r\n  let [currentTitle, setCurrentTitle] = useState(null);\r\n  let [value, setValue] = useState();\r\n  let dataHistory = useHistory();\r\n\r\n  useEffect(() => {\r\n    value = dataHistory.location.pathname.split(\"/instructions/\");\r\n    axios.post(\"/api/v1/titles/title\", { value: value[1] }).then((res) => {\r\n      // console.log(res);\r\n      let data = res.data;\r\n      setCurrentTitle(data);\r\n    });\r\n    axios\r\n      .post(\"/api/v1/instructions/search_instructions\", { value: value[1] })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        let data = res.data;\r\n        setStepsData(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const modalClosed = () => {\r\n    console.log(\"modal closed\");\r\n    axios\r\n      .post(\"/api/v1/instructions/search_instructions\", { value: dataInfo.id })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        let data = res.data;\r\n        setStepsData(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n    console.log(stepsData);\r\n  };\r\n\r\n  const deleteInstruction = (id) => {\r\n    axios\r\n      .delete(\"/api/v1/instructions/delete_instruction\", {\r\n        params: {\r\n          id: id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        axios\r\n          .post(\"/api/v1/instructions/search_instructions\", {\r\n            value: dataInfo.id,\r\n          })\r\n          .then((res) => {\r\n            // console.log(res);\r\n            let data = res.data;\r\n            setStepsData(data);\r\n          });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const goBack = () => {};\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Link to=\"/instructions\">\r\n          <Button type=\"primary\" onClick={() => goBack()}>\r\n            <LeftOutlined /> Bact to Home\r\n          </Button>\r\n        </Link>\r\n      </Row>\r\n\r\n      <Divider>\r\n        <Title level={2}>\r\n          {currentTitle == null ? \" \" : currentTitle[0].title}\r\n        </Title>\r\n      </Divider>\r\n\r\n      <Row>\r\n        <AddStepsModal\r\n          info={dataInfo}\r\n          stepInfo={stepsData}\r\n          afterClosing={modalClosed}\r\n        />\r\n      </Row>\r\n\r\n      <Divider></Divider>\r\n\r\n      <List\r\n        size=\"large\"\r\n        header={<Title level={2}>Steps</Title>}\r\n        footer={<div>Footer</div>}\r\n        bordered\r\n        dataSource={stepsData}\r\n        renderItem={(item) => (\r\n          <List.Item>\r\n            <Col>{item.stepNumber}</Col>\r\n            <Col flex=\"auto\">{item.stepInstruction}</Col>\r\n            <Col>\r\n              <UpdateStepsModal\r\n                info={dataInfo}\r\n                stepInfo={item}\r\n                afterClosing={modalClosed}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Button type=\"danger\" onClick={() => deleteInstruction(item.id)}>\r\n                Delete\r\n              </Button>\r\n            </Col>\r\n          </List.Item>\r\n        )}\r\n      />\r\n\r\n      <Divider></Divider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(ViewInstructions);\r\n"],"sourceRoot":""}