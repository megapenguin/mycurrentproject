{"version":3,"sources":["components/Profile/Profile.js"],"names":["withRouter","history","Auth","useContext","AuthContext","Title","useForm","form","useState","state","userData","userInfo","picture","setPicture","setFilename","setUploadedImagePath","setUploadImageStatus","useEffect","setFieldsValue","id","firstName","lastName","email","axios","post","imageOwnerId","imageReferenceId","then","res","data","catch","error","console","log","onFinish","values","success","content","okButtonProps","uploadFile","name","action","headers","authorization","onChange","info","file","status","fileList","to","type","level","span","onRemove","val","delete","params","fileName","response","imagePath","fileId","listType","showUploadList","showPreviewIcon","maxCount","Group","gutter","map","pic","index","src","smImagePath","value","onClick","profilePicture","icon","danger","imagesCopy","filter","image","layout","initialValues","remember","onFinishFailed","errorInfo","style","borderRadius","Item","label","disabled","bordered","htmlType"],"mappings":"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","file":"static/js/7.28e1820f.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Image,\r\n  Modal,\r\n  Button,\r\n  Upload,\r\n  Space,\r\n  Divider,\r\n  Typography,\r\n  message,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Radio,\r\n} from \"antd\";\r\nimport { UploadOutlined, LeftOutlined, CloseOutlined } from \"@ant-design/icons\";\r\n\r\nimport axios from \"axios\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { AuthContext } from \"../GlobalContext/AuthContext\";\r\n\r\nfunction Profile({ history }) {\r\n  let Auth = useContext(AuthContext);\r\n  const { Title } = Typography;\r\n  const [form] = Form.useForm();\r\n  const [userInfo, setUserInfo] = useState(Auth.state.userData);\r\n  const [picture, setPicture] = useState(null);\r\n\r\n  const [filename, setFilename] = useState(\"Choose file\");\r\n  const [uploadedImagePath, setUploadedImagePath] = useState(\"\");\r\n  const [uploadImageStatus, setUploadImageStatus] = useState(\"none\");\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      id: userInfo.id,\r\n      firstName: userInfo.firstName,\r\n      lastName: userInfo.lastName,\r\n      email: userInfo.email,\r\n    });\r\n    axios\r\n      .post(\"/api/v1/images/search_images\", {\r\n        imageOwnerId: userInfo.id,\r\n        imageReferenceId: 1,\r\n      })\r\n      .then((res) => {\r\n        let data = res.data;\r\n        setPicture(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n    values[\"profilePicture\"] = \"\";\r\n    axios\r\n      .post(\"/api/v1/users/update_user\", values)\r\n      .then((res) => {\r\n        Modal.success({\r\n          content: \"Successfully updated profile info\",\r\n          okButtonProps: {},\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    Modal.error({\r\n      content: \"Failed to update profile info\",\r\n      okButtonProps: {\r\n        style: { borderRadius: \"50px\" },\r\n      },\r\n    });\r\n\r\n    //console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const removeImage = (val) => {\r\n    //console.log(\"Removed image\", val.response.filePath);\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: val.response.imagePath,\r\n          fileId: val.response.id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUploadImageStatus(\"removed\");\r\n        // console.log(res.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n    setUploadedImagePath();\r\n    message.error(`File removed Successfully.`);\r\n  };\r\n\r\n  const uploadFile = {\r\n    name: \"file\",\r\n    action: \"/api/v1/images/add_image\",\r\n    headers: {\r\n      authorization: \"authorization-text\",\r\n    },\r\n    data: { imageOwnerId: userInfo.id, imageReferenceId: 1 },\r\n    onChange(info) {\r\n      if (info.file.status !== \"uploading\") {\r\n        console.log(\"uploading\", info.file, info.fileList);\r\n      }\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded Successfully.`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload Failed.`);\r\n      }\r\n      setUploadImageStatus(info.file.status);\r\n      setFilename(info);\r\n\r\n      axios\r\n        .post(\"/api/v1/images/search_images\", {\r\n          imageOwnerId: userInfo.id,\r\n          imageReferenceId: 1,\r\n        })\r\n        .then((res) => {\r\n          let data = res.data;\r\n          setPicture(data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    },\r\n  };\r\n\r\n  const selectImage = (imagePath) => {\r\n    axios\r\n      .post(\"/api/v1/users/update_profile_picture\", {\r\n        id: userInfo.id,\r\n        profilePicture: imagePath,\r\n      })\r\n      .then((res) => {\r\n        Modal.success({\r\n          content: \"Succesfully selected profile picture\",\r\n          okButtonProps: {},\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const deleteImage = (id, imagePath) => {\r\n    axios\r\n      .delete(\"/api/v1/images/delete_folder_image\", {\r\n        params: {\r\n          fileName: imagePath,\r\n          fileId: id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let imagesCopy = [...picture];\r\n        imagesCopy = imagesCopy.filter((image) => image.id !== id);\r\n        setPicture(imagesCopy);\r\n        Modal.success({\r\n          content: \"Image has been removed\",\r\n          okButtonProps: {},\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Link to=\"/instructions\">\r\n          <Button type=\"primary\">\r\n            <LeftOutlined /> Bact to Home\r\n          </Button>\r\n        </Link>\r\n      </Row>\r\n      <Divider>\r\n        <Card>\r\n          {\" \"}\r\n          <Title level={2}>My Profile Account</Title>\r\n        </Card>\r\n      </Divider>\r\n      <Row>\r\n        <Col span={6}>\r\n          <Upload\r\n            {...uploadFile}\r\n            onRemove={removeImage}\r\n            listType=\"picture-card\"\r\n            showUploadList={{ showPreviewIcon: false }}\r\n            maxCount={1}\r\n          >\r\n            <Space>\r\n              <UploadOutlined />\r\n              Upload Picture\r\n            </Space>\r\n          </Upload>\r\n        </Col>\r\n        <Col span={16}>\r\n          <Radio.Group name=\"radiogroup\">\r\n            <Row gutter={[16, 24]}>\r\n              {picture == null\r\n                ? \"No Pictures\"\r\n                : picture.map((pic, index) => (\r\n                    <Col key={index} span={6}>\r\n                      <Image\r\n                        key={index}\r\n                        src={`api/v1/images/${[pic.smImagePath]}`}\r\n                      />\r\n                      <Radio\r\n                        value={index}\r\n                        onClick={() => selectImage(pic.imagePath)}\r\n                      >\r\n                        Select\r\n                      </Radio>\r\n                      <Button\r\n                        icon={<CloseOutlined />}\r\n                        danger\r\n                        onClick={() => deleteImage(pic.id, pic.smImagePath)}\r\n                      ></Button>\r\n                    </Col>\r\n                  ))}\r\n            </Row>\r\n          </Radio.Group>\r\n        </Col>\r\n      </Row>\r\n      <Form\r\n        layout=\"vertical\"\r\n        name=\"basic\"\r\n        form={form}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        id=\"myForm\"\r\n      >\r\n        <Form.Item label=\"Id:\" name=\"id\">\r\n          <Input disabled={true} bordered={false} />\r\n        </Form.Item>\r\n        <Form.Item label=\"First Name: \" name=\"firstName\">\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"Last Name:\" name=\"lastName\">\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item label=\"Email:\" name=\"email\">\r\n          <Input />\r\n        </Form.Item>\r\n        <Row>\r\n          <Button type=\"primary\" htmlType=\"submit\" onClick={() => onFinish}>\r\n            Save Info\r\n          </Button>\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Profile);\r\n"],"sourceRoot":""}